`Provisioners`

- run commands after infrastructure has been provisioned
- can run script locally or remotely after a resource has been created
- should be used apringly, better alternatives for configuration management(chef,puppet,ansible)
- are inside resource block

    ex:
        resource "aws_instance" "my_instance"{
            ami=data.aws_ami.app_ami.id
            instance_type=var.instance_type

            provisioner "local-exec"{
                command="echo ${aws_instance.my_instance.private_ip} >> private_ips.txt"
            }
        } 

- local-exec provisioner
    - invokes a local executable after the resource is created
    - invokes a process on machine running terraform NOT the target resource **IMPORTANT**

    ex:
       resource "aws_instance" "my_instance"{
            ami=data.aws_ami.app_ami.id
            instance_type=var.instance_type

            provisioner "local-exec"{
                command="echo ${aws_instance.my_instance.private_ip} >> private_ips.txt"
            }
        } 

- remote-exec provisioner
    - invokes a script on a remote resource after it is created
    - supports:
        - winrm - Windows Remote Management (WinRM)
        - ssh - Secure shell

    ex :
        resource "aws_instance" "myec2"{
            ami="ami-1234qwerty"
            instance_type="t2.micro"
            key_name"terraform-key-name"
            vpc_security_group_ids=[aws_security_group.allow_ssh.id]
        
            provisioner "remote-exec"{
                inline=[
                    "sudo amazon-linux-extras install -y nginx1.12",
                    "sudo systemctl start nginx"
                ]

                connection{
                    type="ssh"
                    user"ec2-user"
                    private_key=file("~/terraform.pem")
                    host=self.public_ip
                }
            }
        }

        ## NOTE - Adding a new security group resource to allow the terraform provisioner from laptop to connect to ec2 instance via SSH 
        resource "aws_security_group" "allow_ssh"{
            name="allow_ssh"

            ingress{
                from_port=22
                to_port=22
                protocol="tcp"
                cidr_blocks=["0.0.0.0/0"]
            }
            egress{
                from_port=0
                to_port=65535
                protocol="tcp"
                cidr_blocks=["0.0.0.0/0"]
            }
        }

`Types of Provisioners`
chef/puppet/connection/file/habitat/local-exec/null_resource/remote-exec/salt-masterless

`Types of Temporal Provisioners`
1. Creation-Time provisioner
    - only run during Creation
    - if fails the resource is marked as tainted

2. Destroy-Time provisioner
    - only run during before a resource is destroyed
    ex:
        resource "aws_instance" "my_instance"{
            ami=data.aws_ami.app_ami.id
            instance_type=var.instance_type

            provisioner "local-exec"{
                when=detroy
                command="echo ${aws_instance.my_instance.private_ip} >> private_ips.txt"
            }
        } 

`Failure Behavior of Provisioners`

on_failure
    - continue :: ignore error and continue creation or destruction
    - fail :: default behaviour, raise an error and stop, mark resource as tainted.


----------------------------------------------------------