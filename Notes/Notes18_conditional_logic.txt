`Conditional logic`

-Creating conditional logic within Terraform configurations allows for creating a more dynamic configuration. 
- This allows for greater abstraction and logic flow in the code. 
- It's essential to understand the logical conditions that can be created within the HCL (HashiCorp Configuration Language) language as it provides even more reusability.
- condition ? true : false
    
    ex:
        terraform {
            required_providers {
                aws = {
                source  = "hashicorp/aws"
                version = ">=3.7.0"
                }
            }
        }
        data "aws_ami" "default" {
            most_recent = "true"
            filter {
                name   = "name"
                values = ["ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"]
            }
            filter {
                name   = "virtualization-type"
                values = ["hvm"]
            }
            owners = ["099720109477"]
        }
        resource "aws_instance" "server" {
            ami           = var.ami != "" ? var.ami : data.aws_ami.default.image_id
            instance_type = var.instance_size
            tags = {
                Name = "calabvm"
            }
        }

        ##The condition is if the variable AMI does not contain an empty string. If it is true, then set the AMI to the value of var.ami. If it is false, set the value of the AMI to the ID of data.aws_ami.default[0].image_id which is the AMI ID that was collected in the data block. This strategy gives the module the ability to take in AMI ID input or find an AMI on its own and makes the module more dynamic

---------------------------------------------------------------------------------------------